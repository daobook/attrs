# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Hynek Schlawack
# This file is distributed under the same license as the attrs package.
# xinetzone <xinzone@outlook.com>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: attrs 22.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-10 12:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../names.md:1
msgid "On The Core API Names"
msgstr "关于核心 API 名称"

#: ../../names.md:3
msgid ""
"You may be surprised seeing *attrs* classes being created using "
"{func}`attrs.define` and with type annotated fields, instead of "
"{func}`attr.s` and {func}`attr.ib()`."
msgstr ""
"你可能会惊讶地发现，*attrs* 类是使用 {func}`attrs.define` 和带类型注释的字段创建的，而不是 {func}`attr.s` 和 {func}`attr.ib()`。"

#: ../../names.md:5
msgid ""
"Or, you wonder why the web and talks are full of this weird `attr.s` and "
"`attr.ib` -- including people having strong opinions about it and using "
"`attr.attrs` and `attr.attrib` instead."
msgstr ""
"或者，你想知道为什么网络和谈话都充满了这种奇怪的 `attr.s` 和 `attr.ib`——包括对它有强烈意见和使用 `attr.attrs`  和 `attr.attrib` 代替。"

#: ../../names.md:7
msgid ""
"And what even is `attr.dataclass` that's not documented but commonly "
"used!?"
msgstr ""
"并且 `attr.dataclass` 甚至没有被记录下来，但被普遍使用!?"

#: ../../names.md:10
msgid "TL;DR"
msgstr ""

#: ../../names.md:12
msgid "We recommend our modern APIs for new code:"
msgstr "我们推荐我们的现代 api 的新代码："

#: ../../names.md:16
msgid "{func}`attrs.define` to define a new class,"
msgstr "{func}`attrs.define` 定义新类，"

#: ../../names.md:17
msgid "[`attrs.mutable()`](attrs.mutable) is an alias for {func}`attrs.define`,"
msgstr "[`attrs.mutable()`](attrs.mutable) 是 {func}`attrs.define` 的别名，"

#: ../../names.md:18
msgid "[`attrs.frozen()`](attrs.frozen) is an alias for `define(frozen=True)`"
msgstr "[`attrs.frozen()`](attrs.frozen) 是 `define(frozen=True)` 的别名"

#: ../../names.md:19
msgid "and {func}`attrs.field()` to define an attribute."
msgstr "并且 {func}`attrs.field()` 定义属性。"

#: ../../names.md:21
msgid ""
"They have been added in *attrs* 20.1.0, they are expressive, and they "
"have modern defaults like slots and type annotation awareness switched on"
" by default. Sometimes they're referred to as *next-generation* or *NG* "
"APIs. As of *attrs* 21.3.0 you can also import them from the `attrs` "
"package namespace."
msgstr ""
"它们是在 *attrs* 20.1.0 中添加的，它们很有表现力，并且默认开启了插槽和类型注释感知等现代默认值。"
"有时它们被称为 *next-generation* 或 *NG* API。从 *attrs* 21.3.0开始，您还可以从 `attrs` 包命名空间导入它们。"

#: ../../names.md:25
msgid ""
"The traditional APIs {func}`attr.s` / {func}`attr.ib`, their serious-"
"business aliases `attr.attrs` / `attr.attrib`, and the never-documented, "
"but popular `attr.dataclass` easter egg will stay **forever**."
msgstr ""
"传统的 API {func}`attr.s` / {func}`attr.ib`，它们的严肃业务别名 `attr.attrs` / `attr.attrib`，以及从未记录在案但很流行的 `attr.dataclass` 彩蛋将永远存在。"

#: ../../names.md:27
msgid "*attrs* will **never** force you to use type annotations."
msgstr "*attrs* 永远不会强迫你使用类型注释。"

#: ../../names.md:30
msgid "A Short History Lesson"
msgstr ""

#: ../../names.md:32
msgid ""
"At this point, *attrs* is an old project. It had its first release in "
"April 2015 -- back when most Python code was on Python 2.7 and Python 3.4"
" was the first Python 3 release that showed promise. *attrs* was always "
"Python 3-first, but [type annotations](https://peps.python.org/pep-0484/)"
" came only into Python 3.5 that was released in September 2015 and were "
"largely ignored until years later."
msgstr ""

#: ../../names.md:36
msgid ""
"At this time, if you didn't want to implement all the {term}`dunder "
"methods`, the most common way to create a class with some attributes on "
"it was to subclass a {obj}`collections.namedtuple`, or one of the many "
"hacks that allowed you to access dictionary keys using attribute lookup."
msgstr ""

#: ../../names.md:38
msgid ""
"But *attrs* history goes even a bit further back, to the now-forgotten "
"[*characteristic*](https://github.com/hynek/characteristic) that came out"
" in May 2014 and already used a class decorator, but was overall too "
"unergonomic."
msgstr ""

#: ../../names.md:40
msgid ""
"In the wake of all of that, [Glyph](https://github.com/glyph) and "
"[Hynek](https://github.com/hynek) came together on IRC and brainstormed "
"how to take the good ideas of *characteristic*, but make them easier to "
"use and read. At this point the plan was not to make *attrs* what it is "
"now -- a flexible class-building kit. All we wanted was an ergonomic "
"little library to succinctly define classes with attributes."
msgstr ""

#: ../../names.md:44
msgid ""
"Under the impression of the unwieldy `characteristic` name, we went to "
"the other side and decided to make the package name part of the API, and "
"keep the API functions very short. This led to the infamous "
"{func}`attr.s` and {func}`attr.ib` which some found confusing and "
"pronounced it as \"attr dot s\" or used a singular `@s` as the decorator."
" But it was really just a way to say `attrs` and `attrib`[^attr]."
msgstr ""

#: ../../names.md:50
msgid ""
"Some people hated this cutey API from day one, which is why we added "
"aliases for them that we called *serious business*: `@attr.attrs` and "
"`attr.attrib()`. Fans of them usually imported the names and didn't use "
"the package name in the first place. Unfortunately, the `attr` package "
"name started creaking the moment we added `attr.Factory`, since it "
"couldn’t be morphed into something meaningful in any way. A problem that "
"grew worse over time, as more APIs and even modules were added."
msgstr ""

#: ../../names.md:55
msgid ""
"But overall, *attrs* in this shape was a **huge** success -- especially "
"after Glyph's blog post [*The One Python Library Everyone "
"Needs*](https://glyph.twistedmatrix.com/2016/08/attrs.html) in August "
"2016 and [*pytest*](https://docs.pytest.org/) adopting it."
msgstr ""

#: ../../names.md:57
msgid "Being able to just write:"
msgstr ""

#: ../../names.md:66
msgid "was a big step for those who wanted to write small, focused classes."
msgstr ""

#: ../../names.md:68
msgid "Dataclasses Enter The Arena"
msgstr ""

#: ../../names.md:70
msgid ""
"A big change happened in May 2017 when Hynek sat down with [Guido van "
"Rossum](https://en.wikipedia.org/wiki/Guido_van_Rossum) and [Eric V. "
"Smith](https://github.com/ericvsmith) at PyCon US 2017."
msgstr ""

#: ../../names.md:72
msgid ""
"Type annotations for class attributes have [just "
"landed](https://peps.python.org/pep-0526/) in Python 3.6 and Guido felt "
"like it would be a good mechanic to introduce something similar to "
"*attrs* to the Python standard library. The result, of course, was "
"{pep}`557`[^stdlib] which eventually became the `dataclasses` module in "
"Python 3.7."
msgstr ""

#: ../../names.md:78
msgid ""
"*attrs* at this point was lucky to have several people on board who were "
"also very excited about type annotations and helped implement it; "
"including a [Mypy plugin](https://medium.com/@Pilot-EPD-Blog/mypy-and-"
"attrs-e1b0225e9ac6). And so it happened that *attrs* "
"[shipped](https://www.attrs.org/en/17.3.0.post2/changelog.html) the new "
"method of defining classes more than half a year before Python 3.7 -- and"
" thus `dataclasses` -- were released."
msgstr ""

#: ../../names.md:83
msgid ""
"Due to backwards-compatibility concerns, this feature is off by default "
"in the {func}`attr.s` decorator and has to be activated using "
"`@attr.s(auto_attribs=True)`, though. As a little easter egg and to save "
"ourselves some typing, we've also [added](https://github.com/python-"
"attrs/attrs/commit/88aa1c897dfe2ee4aa987e4a56f2ba1344a17238#diff-"
"4fc63db1f2fcb7c6e464ee9a77c3c74e90dd191d1c9ffc3bdd1234d3a6663dc0R48) an "
"alias called `attr.dataclasses` that just set `auto_attribs=True`. It was"
" never documented, but people found it and used it and loved it."
msgstr ""

#: ../../names.md:87
msgid ""
"Over the next months and years it became clear that type annotations have"
" become the popular way to define classes and their attributes. However, "
"it has also become clear that some people viscerally hate type "
"annotations. We're determined to serve both."
msgstr ""

#: ../../names.md:92
msgid "*attrs* TNG"
msgstr ""

#: ../../names.md:94
msgid ""
"Over its existence, *attrs* never stood still. But since we also greatly "
"care about backwards-compatibility and not breaking our users' code, many"
" features and niceties have to be manually activated."
msgstr ""

#: ../../names.md:97
msgid ""
"That is not only annoying, it also leads to the problem that many of "
"*attrs*'s users don't even know what it can do for them. We've spent "
"years alone explaining that defining attributes using type annotations is"
" in no way unique to {mod}`dataclasses`."
msgstr ""

#: ../../names.md:100
msgid ""
"Finally we've decided to take the [Go route](https://go.dev/blog/module-"
"compatibility): Instead of fiddling with the old APIs -- whose names felt"
" anachronistic anyway -- we'd define new ones, with better defaults. So "
"in July 2018, we [looked for better names](https://github.com/python-"
"attrs/attrs/issues/408) and came up with {func}`attr.define`, "
"{func}`attr.field`, and friends. Then in January 2019, we [started "
"looking for inconvenient defaults](https://github.com/python-"
"attrs/attrs/issues/487) that we now could fix without any repercussions."
msgstr ""

#: ../../names.md:105
msgid ""
"These APIs proved to be very popular, so we've finally changed the "
"documentation to them in November of 2021."
msgstr ""

#: ../../names.md:107
msgid ""
"All of this took way too long, of course. One reason is the COVID-19 "
"pandemic, but also our fear to fumble this historic chance to fix our "
"APIs."
msgstr ""

#: ../../names.md:110
msgid "Finally, in December 2021, we've added the *attrs* package namespace."
msgstr ""

#: ../../names.md:112
msgid "We hope you like the result:"
msgstr ""

#: ../../names.md:48
msgid ""
"We considered calling the PyPI package just `attr` too, but the name was "
"already taken by an *ostensibly* inactive [package on "
"PyPI](https://pypi.org/project/attr/#history)."
msgstr ""

#: ../../names.md:75
msgid ""
"The highly readable PEP also explains why *attrs* wasn't just added to "
"the standard library. Don't believe the myths and rumors."
msgstr ""

